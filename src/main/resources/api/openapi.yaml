openapi: 3.0.3
info:
  title: Customer Management API
  description: RESTful API for managing customers and their purchases
  version: 1.0.0

servers:
  - url: /api/v1

paths:
  /customers:
    get:
      summary: List all customers
      description: Returns a list of customers with optional pagination
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
    post:
      summary: Create a new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreate'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/components/responses/BadRequest'

  /customers/{customerId}:
    parameters:
      - $ref: '#/components/parameters/CustomerIdParam'
    get:
      summary: Get customer by ID
      responses:
        '200':
          description: Customer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpdate'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete customer
      responses:
        '204':
          description: Customer deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

  /customers/{customerId}/purchases:
    parameters:
      - $ref: '#/components/parameters/CustomerIdParam'
    get:
      summary: List customer purchases
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: List of customer purchases
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Purchase'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Create a new purchase for customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseCreate'
      responses:
        '201':
          description: Purchase created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'

  /customers/{customerId}/purchases/{purchaseId}:
    parameters:
      - $ref: '#/components/parameters/CustomerIdParam'
      - $ref: '#/components/parameters/PurchaseIdParam'
    get:
      summary: Get purchase by ID
      responses:
        '200':
          description: Purchase found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update purchase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseUpdate'
      responses:
        '200':
          description: Purchase updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete purchase
      responses:
        '204':
          description: Purchase deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'

components:
  parameters:
    CustomerIdParam:
      name: customerId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    PurchaseIdParam:
      name: purchaseId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    PageParam:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 1
    LimitParam:
      name: limit
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        first_name:
          type: string
          minLength: 1
        last_name:
          type: string
          minLength: 1
        birthdate:
          type: integer
          description: Customer's birthdate as Unix timestamp in milliseconds
        phone:
          type: string
          pattern: '^\\d{3}-\\d{3}-\\d{5}$'
        created_at:
          type: integer
          description: Creation timestamp in milliseconds since epoch
        updated_at:
          type: integer
          description: Last update timestamp in milliseconds since epoch
        purchases:
          type: array
          items:
            $ref: '#/components/schemas/Purchase'
      required:
        - id
        - first_name
        - last_name
        - birthdate
        - phone
        - created_at
        - updated_at

    CustomerCreate:
      type: object
      properties:
        first_name:
          type: string
          minLength: 1
        last_name:
          type: string
          minLength: 1
        birthdate:
          type: integer
          description: Customer's birthdate as Unix timestamp in milliseconds
        phone:
          type: string
          pattern: '^\\d{3}-\\d{3}-\\d{5}$'
      required:
        - first_name
        - last_name
        - birthdate
        - phone

    CustomerUpdate:
      type: object
      properties:
        first_name:
          type: string
          minLength: 1
        last_name:
          type: string
          minLength: 1
        birthdate:
          type: integer
          description: Customer's birthdate as Unix timestamp in milliseconds
        phone:
          type: string
          pattern: '^\\d{3}-\\d{3}-\\d{5}$'

    Purchase:
      type: object
      properties:
        id:
          type: string
          format: uuid
        item:
          $ref: '#/components/schemas/Item'
        quantity:
          type: integer
          minimum: 1
        ship_to:
          $ref: '#/components/schemas/Address'
        created_at:
          type: integer
          description: Creation timestamp in milliseconds since epoch
        updated_at:
          type: integer
          description: Last update timestamp in milliseconds since epoch
      required:
        - id
        - item
        - quantity
        - ship_to
        - created_at
        - updated_at

    PurchaseCreate:
      type: object
      properties:
        item:
          $ref: '#/components/schemas/ItemCreate'
        quantity:
          type: integer
          minimum: 1
        ship_to:
          $ref: '#/components/schemas/AddressCreate'
      required:
        - item
        - quantity
        - ship_to

    PurchaseUpdate:
      type: object
      properties:
        item:
          $ref: '#/components/schemas/ItemCreate'
        quantity:
          type: integer
          minimum: 1
        ship_to:
          $ref: '#/components/schemas/AddressCreate'

    Item:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
        description:
          type: string
        price:
          type: number
          minimum: 0
        created_at:
          type: integer
          description: Creation timestamp in milliseconds since epoch
        updated_at:
          type: integer
          description: Last update timestamp in milliseconds since epoch
      required:
        - id
        - name
        - price
        - created_at
        - updated_at

    ItemCreate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
        price:
          type: number
          minimum: 0
      required:
        - name
        - price

    Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
        street_line_one:
          type: string
          minLength: 1
        street_line_two:
          type: string
        city:
          type: string
          minLength: 1
        state:
          type: string
          minLength: 2
          maxLength: 2
        zip:
          type: string
          pattern: '^\\d{5}(-\\d{4})?$'
        created_at:
          type: integer
          description: Creation timestamp in milliseconds since epoch
        updated_at:
          type: integer
          description: Last update timestamp in milliseconds since epoch
      required:
        - id
        - street_line_one
        - city
        - state
        - zip
        - created_at
        - updated_at

    AddressCreate:
      type: object
      properties:
        street_line_one:
          type: string
          minLength: 1
        street_line_two:
          type: string
        city:
          type: string
          minLength: 1
        state:
          type: string
          minLength: 2
          maxLength: 2
        zip:
          type: string
          pattern: '^\\d{5}(-\\d{4})?$'
      required:
        - street_line_one
        - city
        - state
        - zip

    PaginationInfo:
      type: object
      properties:
        total:
          type: integer
          minimum: 0
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
        total_pages:
          type: integer
          minimum: 1

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: string
      required:
        - code
        - message